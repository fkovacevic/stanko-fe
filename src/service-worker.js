/* eslint-disable no-restricted-globals */
import { clientsClaim } from 'workbox-core';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';

import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
	// Return false to exempt requests from being fulfilled by index.html.
	({ request, url }) => {
		// If this isn't a navigation, skip.
		if (request.mode !== 'navigate') {
			return false;
		} // If this is a URL that starts with /_, skip.

		if (url.pathname.startsWith('/_')) {
			return false;
		} // If this looks like a URL for a resource, because it contains // a file extension, skip.

		if (url.pathname.match(fileExtensionRegexp)) {
			return false;
		} // Return true to signal that we want to use the handler.

		return true;
	},
	createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);


registerRoute(
	({ url }) => {
		return url.pathname.endsWith('.png')
				|| url.pathname.endsWith('.svg')
				|| url.pathname.endsWith('.jpg')
				|| url.pathname.endsWith('.jpeg')
	},
	new CacheFirst({
		cacheName: 'images',
	})
);


self.addEventListener('push', (event) => {
	let data = {};
	if (event.data) {
		data = event.data.json();
	}
	const options = {
		body: data.title,
		icon: '/stanko-image-64.png',
		vibrate: [100, 50, 100],
		actions: [
			{ action: 'check', title: 'Pogledaj novosti' },
		],
		image: data.image,
	};
	  event.waitUntil(
		self.registration.showNotification('Nova obavijest za VaÅ¡e preference', options)
	  );
});

self.addEventListener('notificationclick', (event) => {
	if (event.action === 'check') {
		self.clients.openWindow('/stanovi');
	}
});
